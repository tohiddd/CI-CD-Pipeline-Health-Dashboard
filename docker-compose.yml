version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cicd-dashboard-db
    environment:
      POSTGRES_DB: cicd_dashboard
      POSTGRES_USER: cicd_user
      POSTGRES_PASSWORD: cicd_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - cicd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cicd_user -d cicd_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cicd-dashboard-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cicd-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cicd-dashboard-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://cicd_user:cicd_password@postgres:5432/cicd_dashboard
      REDIS_URL: redis://redis:6379
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      JENKINS_URL: ${JENKINS_URL}
      JENKINS_USERNAME: ${JENKINS_USERNAME}
      JENKINS_API_TOKEN: ${JENKINS_API_TOKEN}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-change-in-production}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cicd-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cicd-dashboard-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - cicd-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Development tools (optional)
  adminer:
    image: adminer:latest
    container_name: cicd-dashboard-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - cicd-network
    profiles:
      - dev

  # Redis Commander (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cicd-dashboard-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - cicd-network
    profiles:
      - dev

networks:
  cicd-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
